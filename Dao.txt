모델 역할 분리

MemberDao-공유 객체, 모델 뷰 컨트롤의 모델 역할 
데이터를 다루는 로직 분리 

웹 브라우저 (요청)>MemberListServlet>MemberDao(데이터처리관련 호출)>Member(생성)>
생성된 벨류 객체(Member)를 MemberListServlet로 리턴> MemberList.jsp 화면 생성 위임>
결과 화면 리턴> MeberListServlet> 웹 브라우저

ServletContextListener를 이용한 공유 객체 준비

이벤트 리스너
웹 애플리케이션에서 사건 발생 시, 
서블릿 컨테이너는 웹 애플리케이션의 이벤트 리스너에서
관련 메소드
(contextInitialized()- 웹 애플리케이션 시작, contextDestroyed()- 웹 애플리케이션 종료/ 사건이 발생하면 호출되는 메소드)
를 호출한다.
 
이러한 호출되는 메소드의 규칙을 정의한게 
ServletContextListener <interface>
↑구현
ContextLoaderListener- web.xml에 <listener></listener>태그 사용


DB 커넥션풀- 한정된 자원을 효율적으로 사용하는 방법

각 DAO가 하나의 커넥션을 사용했을 때 예외가 발생하면 기존에 했던 작업 rollback-> connection 객체 안에서 사용

싱글커넥션 사용-같은 커넥션을 이용하는 DAO들의 작업에 영향을 미친다. ->각 DAO별로 커넥션 할당하면 일을 하지 않을 때도 서버를 연결 자원낭비!!

대여->풀링(Pooling)



// 인터페이스

스마트폰과 밧데리가 각각 독립적으로 문제없이 돌아간다고 가정할때, 상호간의 단자만 규격에 맞을시, 

어떠한 밧데리를 교환하더라도 스마트폰은 정상 작동할 것이다.

이와 같이 소프트웨어 에서도 단자와 같은 일종의 장치가 필요하다. 객체지향 언어에서는 이러한 장치를

인터페이스(interface)로 제공해준다. 

인터페이스는 사용자에게 해당 소프트웨어를 쓰기위한 

메서드(=장치)를 공개하고, 규격화된 메서드 환경에서 소프트웨어를 개발할 수 있는 환경을 제공해준다.

소프트웨어의 세부내용은 인터페이스를 구현받은 클래스가 작성한다.

이렇게 함으로써 객체지향 개념은 정보은닉개념을 수행할 수 있을 뿐더러,

각각 독립된 모듈로 소프트웨어를 만들수 있도록 크게 이바지 할 수 있다.


//컴포넌트

컴포넌트는 각각 독립된 모듈을 뜻하며, 

이는 흔히 JAVA같은 oop 언어등의 class등의 개념과는 다르다. 

하나의 컴포넌트는 하나의 클래스로만 작성될 수 도 있지만, 여러개의 클래스로도

작성될 수 있기 때문이다. 컴포넌트 개념을 잘 적용한 소프트웨어란 부품(인터페이스를 구현받은 클래스)

만 바꾸어 주었을시, 오류 없이 잘 작동 되는것 을 의미한다.




출처: https://mommoo.tistory.com/55 [개발자로 홀로 서기]






-